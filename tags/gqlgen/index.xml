<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gqlgen on Stefan Gloutnikov</title>
    <link>https://gloutnikov.com/tags/gqlgen/</link>
    <description>Recent content in Gqlgen on Stefan Gloutnikov</description>
    <generator>Hugo 0.125.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Mar 2021 14:08:22 -0700</lastBuildDate>
    <atom:link href="https://gloutnikov.com/tags/gqlgen/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GraphQL Subscriptions with Go (gqlgen) Example</title>
      <link>https://gloutnikov.com/post/graphql-subscriptions-go-gqlgen-example/</link>
      <pubDate>Sun, 28 Mar 2021 14:08:22 -0700</pubDate>
      <guid>https://gloutnikov.com/post/graphql-subscriptions-go-gqlgen-example/</guid>
      <description>&lt;p&gt;GraphQL subscriptions are extremely useful in situations when a server needs to update its clients. A chat application is a great example to demonstrate this, as when new messages arrive we want to distribute them among all chat participants as quickly as possible without polling. When I first started looking at implementing GraphQL subscriptions in Go it took me a bit before I had my aha moment and everything clicked together. Also, at that time there were not a whole lot of examples that I could look at or reference. This post will go over a concrete chat application example using GraphQL subscriptions and a backend built in Go with gqlgen.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
